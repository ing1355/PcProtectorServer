<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="oms.pc_protector.restApi.user.mapper.UserMapper">

    <select id="selectUserInfoAll" resultType="oms.pc_protector.restApi.user.model.UserVO">
        SELECT u.user_id,
               u.department_idx,
               u.department,
               u.name,
               IFNULL(GROUP_CONCAT(ip_address SEPARATOR ' / '), "") AS ip_address,
               u.email,
               u.phone
        FROM user AS u
                 LEFT join client AS c
                           ON u.user_id = c.user_id
        GROUP BY u.user_id
    </select>

    <select id="selectById" resultType="oms.pc_protector.restApi.user.model.UserVO"
            parameterType="String">
        SELECT *
        FROM user
        WHERE user_id = #{value}
    </select>

    <select id="selectSameId" resultType="int" parameterType="String">
        SELECT COUNT(*) FROM user WHERE user_id = #{value}
    </select>

    <select id="selectByDepartment" resultType="oms.pc_protector.restApi.user.model.UserVO"
            parameterType="String">
        SELECT * FROM user WHERE department = #{value}
    </select>

    <select id="selectByDepartmentCode" resultType="oms.pc_protector.restApi.user.model.UserVO"
            parameterType="int">
        SELECT * FROM user WHERE department_idx = #{departmentCode}
    </select>

    <select id="search" parameterType="oms.pc_protector.restApi.user.model.UserSearchInputVO"
            resultType="oms.pc_protector.restApi.user.model.UserVO">
        SELECT * FROM user
        WHERE 1 = 1
        <if test='userId != null and userId != ""'>
            AND user_id LIKE CONCAT('%',#{userId},'%')
        </if>
        <if test='name != null and name != ""'>
            AND name LIKE CONCAT('%',#{name},'%')
        </if>
        <if test='departmentCode != null and departmentCode != ""'>
            AND department_idx LIKE CONCAT('%',#{departmentCode},'%')
        </if>
        <if test='phone != null and phone != ""'>
            AND phone LIKE CONCAT('%',#{phone},'%')
        </if>
        ORDER BY idx DESC
    </select>

    <select id="selectUserWithClientByIpAddress" resultType="oms.pc_protector.restApi.user.model.UserResponseVO"
            parameterType="String">
        SELECT u.user_id,
               u.department,
               u.department_idx,
               u.email,
               u.phone,
               c.ip_address,
               c.mac_address,
               c.pc_name,
               c.pc_protector_version,
               c.vaccine_version,
               c.check_time
        FROM user u
                 LEFT JOIN client c ON u.user_id = c.user_id
        WHERE ip_address = #{value}
    </select>

    <select id="selectUserWithClientInfoById" resultType="oms.pc_protector.restApi.user.model.UserResponseVO"
            parameterType="String">
        SELECT u.user_id,
               u.department,
               u.department_idx,
               u.email,
               u.phone,
               c.ip_address,
               c.mac_address,
               c.pc_name,
               c.pc_protector_version,
               c.vaccine_version,
               c.check_time
        FROM user u
                 LEFT JOIN client c ON u.user_id = c.user_id
        WHERE u.user_id = #{value}
    </select>

    <update id="departmentModified" parameterType="oms.pc_protector.restApi.department.model.UpdateDepartmentVO">
        UPDATE user
        SET department = REPLACE(department, #{old_name}, #{new_name})
        WHERE department LIKE CONCAT('%', #{old_name}, '%')
    </update>

    <update id="departmentDeletedChild" parameterType="String">
        UPDATE user
        SET department = '-'
        WHERE department LIKE CONCAT('%',#{value},'%')
    </update>

    <update id="departmentDeletedFirst" parameterType="String">
        UPDATE user
        SET department = '-'
        WHERE department LIKE CONCAT('%',#{value},'%')
    </update>

    <insert id="insertUserInfo" parameterType="String">
        INSERT INTO user (
            user_id
        )
        VALUES (
                   #{userId}
               )
    </insert>

    <insert id="insertUserInfoUserInfoFromAdmin" parameterType="oms.pc_protector.restApi.user.model.UserRequestVO">
        INSERT INTO user (user_id,
                          name,
                          email,
                          phone,
                          department,
                          department_idx)
        VALUES (#{userId},
                #{name},
                #{email},
                #{phone},
                #{department},
                #{departmentIdx})
    </insert>

    <insert id="RegisterUserInfo" parameterType="oms.pc_protector.restApi.user.model.UserVO">
        INSERT INTO user (user_id,
                          name,
                          email,
                          phone,
                          department,
                          department_idx)
        VALUES (#{userId},
                #{name},
                #{email},
                #{phone},
                #{department},
                #{departmentIdx})
    </insert>

    <update id="updateUserInfo" parameterType="oms.pc_protector.restApi.user.model.UserVO">
        UPDATE user, client
        SET user.user_id        =#{userId},
            client.user_id=#{userId},
            user.name           = #{name},
            user.department_idx = #{departmentIdx},
            user.department     = #{department},
            user.email          = #{email},
            user.phone          = #{phone}
        WHERE user_id = #{userId}
    </update>

    <update id="updateUserInfo_Front" parameterType="oms.pc_protector.restApi.user.model.RequestUserVO">
        UPDATE user
        SET user.user_id     = #{userId},
            user.name        = #{name},
            user.department  = #{department},
            user.department_idx = #{departmentCode},
            user.email       = #{email},
            user.phone       = #{phone},
            user.update_time = now()
        WHERE user.user_id = #{userId};
    </update>

    <delete id="deleteUserInfo" parameterType="String">
        DELETE
        FROM user
        WHERE user.user_id = #{value};
        DELETE
        FROM client
        WHERE user_id = #{value};
    </delete>

    <delete id="deleteAllUserInfo">
        DELETE
        FROM user
    </delete>

</mapper>


